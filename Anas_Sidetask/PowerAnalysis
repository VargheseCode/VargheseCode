clear 
clc

%%
baseDir = 'C:\Users\alexv\Box\Lab work\Alex Varghese\'; % Set to where you stored the data

subjectIDarr = {'DLPFC023','DLPFC025','DLPFC026'} %'DLPFC030','DLPFC031','DLPFC032','DLPFC033','DLPFC034','DLPFC041','DLPFC044','DLPFC045','DLPFC052','DLPFC061'};
noStimFname = {'lfp2_','task3','lfp3'}  %'task2','task1','task2','task2','task4','skip41','baseline','baseline','baseline','baseline'};
StimFname = {'lfp3','task5','lfp4'}  %'?','task3','task3','?','task2','?','task2','itbs','itbs','itbs'};

% subjectID = 'DLPFC023';
% subjecti = 1;
% fname = 'lfp2';
%% Load and preprocess ECOG data

for subjecti = 1:length(subjectIDarr)

[INFO,ECOG_nostim,trials] = PreProcessECOG(subjectIDarr(subjecti),noStimFname(subjecti),baseDir);

% Artifact identification
[~,idxs] = FindArtifacts(ECOG_nostim,trials,1); %wait did he do this for each and every channel
badidx = [idxs];
% Remove trials with artifacts
trials(badidx) = [];

%% Epoch Data
[ECOG_error,ECOG_GO,ECOG_NG,time,FAR,RT,RTs,GO_errors,trials] = EpochMyData(ECOG_nostim,trials);

GOtrials = trials([trials.Condition] == "GO");
NGtrials = trials([trials.Condition] == "NOGO");

correctGO = [GOtrials.ACC] == 1;
correctNG = [NGtrials.ACC] == 1;


% Bipolar rereferencing
[ECOG_GO,ECOG_NG,ECOG_error] = BipolarReref(ECOG_GO,ECOG_NG,ECOG_error);


%% Remove Electrodes
ECOG_GO(:,:,1) = [];
ECOG_NG(:,:,1) = [];
ECOG_error(:,:,1) = [];


%% ECOG
% Get Go powers
num_GO_trials = size(ECOG_GO,2);
[GO_CWT,frex,trimmedT] = MyCWT(ECOG_GO,num_GO_trials,time);
GO_powers = GO_CWT.*conj(GO_CWT);
GO_phases = angle(GO_CWT);

% Get NoGo powers
num_NG_trials = size(ECOG_NG,2);
[NG_CWT,~,~] = MyCWT(ECOG_NG,num_NG_trials,time);
NG_powers = NG_CWT.*conj(NG_CWT);
NG_phases = angle(NG_CWT);

clear GO_CWT NG_CWT

% Normalize to pre-stim baseline for all trials

% Concatenate all trials to calculate mean and std for each freq and each electrode
allTrials = cat(3,NG_powers,GO_powers);
allBLs = allTrials(:,1:301,:,:);
allBLs = reshape(allBLs,[size(allTrials,1) 301*size(allBLs,3) size(allTrials,4)]);

clear allTrials

% Initialize means and stds matrices
meanBL = NaN(size(GO_powers,1),size(GO_powers,4));
sdBL = NaN(size(GO_powers,1),size(GO_powers,4));

% Loop over frequencies and electrodes
for elec = 1:size(NG_powers,4)
    for fi = 1:size(NG_powers,1)
        meanBL(fi,elec) = mean(allBLs(fi,:,elec));
        sdBL(fi,elec) = std(allBLs(fi,:,elec));
    end
end

clear allBLs
% Use means and stds to z-score raw data

% Initialize z-scored matrices
zNG_powers = NaN(size(NG_powers,1),length(trimmedT),num_NG_trials,size(NG_powers,4));
zGO_powers = NaN(size(GO_powers,1),length(trimmedT),num_GO_trials,size(GO_powers,4));

for elec = 1:size(NG_powers,4)
    for fi = 1:size(NG_powers,1)
        zNG_powers(fi,:,:,elec) = (NG_powers(fi,:,:,elec) - meanBL(fi,elec))./sdBL(fi,elec);
        zGO_powers(fi,:,:,elec) = (GO_powers(fi,:,:,elec) - meanBL(fi,elec))./sdBL(fi,elec);
    end
end

[~,fidx] = arrayfun(@(x) min(abs(x-frex)), [2 4 10 40 200]);
frexticks = frex(fidx);
clear fidx

% clear Error_powers NG_powers fi elec meanBL sdBL ECOG_NG ECOG_GO ECOG_nostim fname INFO num_GO_trials num_NG_trials %took out the GO_powers
%%
zGO_powers = zGO_powers(:,:,correctGO+1,:); %edited to make correctGO into correctGO+1
zNG_powers = zNG_powers(:,:,correctNG+1,:); %check to see this 



eGO_phases = GO_phases(:,:,correctGO,:);
eNG_phases = NG_phases(:,:,correctNG,:);

% clear GO_phases NG_phases
%%
zGO_powers = zGO_powers(:,:,~correctGO,:); 
zNG_powers = zNG_powers(:,:,correctNG,:);

GO_phases = GO_phases(:,:,correctGO,:);
NG_phases = NG_phases(:,:,correctNG,:);

% clearvars -except GOErrors subjectID subjecti RT Beta lowFreq NG_phases GO_phases eGO_phases eNG_phases CompGOISPC CompNGISPC frex frexticks trimmedT zGO_powers zNG_powers zER_powers FAR 
%%

PDPowers(subjecti).Subject = subjectIDarr(subjecti);
PDPowers(subjecti).ngPower = zGO_powers;
PDPowers(subjecti).Frex = frex;
PDPowers(subjecti).Time = trimmedT;
% clearvars -except PDPowers subjecti subjectID zGO_powers zGO_powers frex trimmedT zNG_powers eGO_phases eNG_phases FAR
%%'
GOErrors(subjecti).Subject = subjectIDarr(subjecti);
GOErrors(subjecti).goPower = zGO_powers;
GOErrors(subjecti).Frex = frex;
GOErrors(subjecti).Time = trimmedT;
% clearvars -except GOErrors zGO_powers frex trimmedT subjectID subjecti zNG_powers eGO_phases eNG_phases FAR

%%
errorPower(subjecti).Subject = subjectIDarr(subjecti);
errorPower(subjecti).goPower = zGO_powers; %changed the variable from zER_Powers to zGO_powers 
errorPower(subjecti).Frex = frex; %changed the variable
errorPower(subjecti).Time = trimmedT;
%%
PDPowers(subjecti).Subject = subjectIDarr(subjecti);
PDPowers(subjecti).goPower = zGO_powers;
PDPowers(subjecti).ngPower = zNG_powers;
PDPowers(subjecti).Frex = frex;
PDPowers(subjecti).Time = trimmedT;

PDPhases(subjecti).Subject = subjectIDarr(subjecti);
PDPhases(subjecti).goPhases = eGO_phases;
PDPhases(subjecti).ngPhases = eNG_phases;
PDPhases(subjecti).Frex = frex;
PDPhases(subjecti).Time = trimmedT;

TaskMetrics(subjecti).Subject = subjectIDarr(subjecti);
TaskMetrics(subjecti).FARs = FAR;
TaskMetrics(subjecti).GOER = GO_errors;
TaskMetrics(subjecti).RT = RT;
TaskMetrics(subjecti).RTs = RTs;

% clearvars -except Coordinates PDPhases PDPowers errorPower Coordinates TaskMetrics subjectID subjecti subjecti subjectIDarr noStimFname baseDir


Coordinates = struct;

%% Shifted the things to underneath
% save('PDCorrect.mat',"PDPhases","PDPowers",'Coordinates')
% save("PDError.mat",'errorPower')
% save('TaskMetrics.mat','TaskMetrics')

%%
Coordinates(subjecti).Subject = subjectIDarr(subjecti);
Coordinates(subjecti).Disease = 'PD';
Coordinates(subjecti).HandKnob = [27.2 -17.9];
Coordinates(subjecti).Electrodes = [10.3 59; 14.4 58.5; 19.5 56.2; 24.1 50.4; 27.2 42.6];
end 


save('PDCorrect.mat',"PDPhases","PDPowers",'Coordinates')
save("PDError.mat",'errorPower')
save('TaskMetrics.mat','TaskMetrics')

% clearvars -except Coordinates allPhases allPowers subjectIDarr noStimFname StimFname baseDir


disp("clear")
